FORMAT: 1A
HOST: https://api.businessbox.hu/vasarloigondoskodas/

# BBox API dokumentáció

A dokumentáció a jelenleg API- keresztül elérhető BBox rendszerfunkciókat tartalmazza.

# Általános változók és funkciók
## Konstruktor

A konstruktor feladata az alkalmazás indításához szükséges vátozók beállítása. Automatikusan hívódik meg.

Az indításhoz szükséges változók:

- LAST_UPDATE: globálisan van beállítva a fő konfigurációs fájlokban (production, staging, local), értéke jelenleg: 201501191236
- $_SESSION['LAST_UPDATE']: az API funkció utolsó frissítésének ideje. Ha be van állítva és nem egyezik a config-ban lévő étrékkel, akkor nem a legfrissebb funkciókat használa a kalkulátor, tehát újra kell inicializálni a folyamatot (törölni kell a beállított tokent).
- $token: az aktuális kalkulációs folyamathoz rendelet azonosító.
- $_SESSION['token']: az aktuális kalkulációs folyamathoz rendelet azonosító $_SESSION-ben tárolt értéke.
- $_SESSION['user']['loggedIn']: logikai változó a $_SESSION-ben, azt jelzi, hogy van e bejelentkezett felhasználó
- $_SESSION['user']['level']: a bejelentkezett felhasználó típusát határozza meg. 
    Értékei:
    0 (title = dummy) Új vásárló
    1 (title = user) Bejelentkezett Vásárló
    2 (title = salesAgent) Bejelentkezett Értékesítő, viszonteladó
- $_SESSION['user']['title']: a bejelentkezett felhasználó cimkéje
- A konstruktorban használt funkciók:

- TokenInit(): minden új folyamathoz egyedi azonosítót generál az API, ezt hajtja végre a TokenInit().
- ApplicationInitialization(): ha sikerül tokent generálni, akkor az alkalmazás lekérdezi a kalkulátor működéséhez szükséges adatokat.

# construct [POST]
+ Parameters
    + token: 123
    + remote: false
    
+ Response 200 (application/json)
    {
        questions_url": "/questions"
    }

# SalesAPI Root

This resource does not have any attributes. Instead it offers the initial
API affordances in the form of the links in the JSON body.


# Retrieve the Entry Point [POST]
+ Parameters
    + ip: 127.0.0.1
    + userAgent: "Firefox"
    
+ Response 200 (application/json)

        {
            "questions_url": "/questions"
        }

## Group Question

Resources related to questions in the API.

## Question [/questions/{question_id}]

A Question object has the following attributes:

+ question
+ published_at - An ISO8601 date when the question was published.
+ url
+ choices - An array of Choice objects.

+ Parameters
    + question_id: 1 (required, number) - ID of the Question in form of an integer

### View a Questions Detail [GET]

+ Response 200 (application/json)

        {
            "question": "Favourite programming language?",
            "published_at": "2014-11-11T08:40:51.620Z",
            "url": "/questions/1",
            "choices": [
                {
                    "choice": "Swift",
                    "url": "/questions/1/choices/1",
                    "votes": 2048
                }, {
                    "choice": "Python",
                    "url": "/questions/1/choices/2",
                    "votes": 1024
                }, {
                    "choice": "Objective-C",
                    "url": "/questions/1/choices/3",
                    "votes": 512
                }, {
                    "choice": "Ruby",
                    "url": "/questions/1/choices/4",
                    "votes": 256
                }
            ]
        }

## Choice [/questions/{question_id}/choices/{choice_id}]

+ Parameters
    + question_id: 1 (required, number) - ID of the Question in form of an integer
    + choice_id: 1 (required, number) - ID of the Choice in form of an integer

### Vote on a Choice [POST]

This action allows you to vote on a question's choice.

+ Response 201

    + Headers

            Location: /questions/1

## Questions Collection [/questions{?page}]

+ Parameters
    + page: 1 (optional, number) - The page of questions to return

### List All Questions [GET]

+ Response 200 (application/json)

    + Headers

            Link: </questions?page=2>; rel="next"

    + Body

            [
                {
                    "question": "Favourite programming language?",
                    "published_at": "2014-11-11T08:40:51.620Z",
                    "url": "/questions/1",
                    "choices": [
                        {
                            "choice": "Swift",
                            "url": "/questions/1/choices/1",
                            "votes": 2048
                        }, {
                            "choice": "Python",
                            "url": "/questions/1/choices/2",
                            "votes": 1024
                        }, {
                            "choice": "Objective-C",
                            "url": "/questions/1/choices/3",
                            "votes": 512
                        }, {
                            "choice": "Ruby",
                            "url": "/questions/1/choices/4",
                            "votes": 256
                        }
                    ]
                }
            ]

### Create a New Question [POST]

You may create your own question using this action. It takes a JSON
object containing a question and a collection of answers in the
form of choices.

+ question (string) - The question
+ choices (array[string]) - A collection of choices.

+ Request (application/json)

        {
            "question": "Favourite programming language?",
            "choices": [
                "Swift",
                "Python",
                "Objective-C",
                "Ruby"
            ]
        }

+ Response 201 (application/json)

    + Headers

            Location: /questions/2

    + Body

            {
                "question": "Favourite programming language?",
                "published_at": "2014-11-11T08:40:51.620Z",
                "url": "/questions/2",
                "choices": [
                    {
                        "choice": "Swift",
                        "url": "/questions/2/choices/1",
                        "votes": 0
                    }, {
                        "choice": "Python",
                        "url": "/questions/2/choices/2",
                        "votes": 0
                    }, {
                        "choice": "Objective-C",
                        "url": "/questions/2/choices/3",
                        "votes": 0
                    }, {
                        "choice": "Ruby",
                        "url": "/questions/2/choices/4",
                        "votes": 0
                    }
                ]
            }
